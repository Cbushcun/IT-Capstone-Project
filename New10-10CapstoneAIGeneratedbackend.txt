import tkinter as tk
import sqlite3
import hashlib
import uuid
import datetime

# Create and connect to the SQLite database
conn = sqlite3.connect("auction_website.db")
cursor = conn.cursor()

# Create Users table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
        user_id INTEGER PRIMARY KEY,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        first_name TEXT,
        last_name TEXT,
        address TEXT,
        phone_number TEXT
    )
''')

# Create Roles table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Roles (
        role_id INTEGER PRIMARY KEY,
        role_name TEXT UNIQUE NOT NULL
    )
''')

# Create UserRoles table to map users to roles
cursor.execute('''
    CREATE TABLE IF NOT EXISTS UserRoles (
        user_id INTEGER,
        role_id INTEGER,
        FOREIGN KEY (user_id) REFERENCES Users (user_id),
        FOREIGN KEY (role_id) REFERENCES Roles (role_id)
    )
''')

# Create Auctions table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Auctions (
        auction_id INTEGER PRIMARY KEY,
        seller_id INTEGER,
        title TEXT NOT NULL,
        description TEXT,
        start_time DATETIME NOT NULL,
        end_time DATETIME NOT NULL,
        reserve_price REAL,
        FOREIGN KEY (seller_id) REFERENCES Users (user_id)
    )
''')

# Create Bids table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Bids (
        bid_id INTEGER PRIMARY KEY,
        auction_id INTEGER,
        user_id INTEGER,
        bid_amount REAL NOT NULL,
        timestamp DATETIME NOT NULL,
        status TEXT,
        FOREIGN KEY (auction_id) REFERENCES Auctions (auction_id),
        FOREIGN KEY (user_id) REFERENCES Users (user_id)
    )
''')

# Create Categories table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Categories (
        category_id INTEGER PRIMARY KEY,
        name TEXT UNIQUE NOT NULL
    )
''')

# Create Tags table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Tags (
        tag_id INTEGER PRIMARY KEY,
        name TEXT UNIQUE NOT NULL
    )
''')

# Create AuctionCategories table to associate auctions with categories
cursor.execute('''
    CREATE TABLE IF NOT EXISTS AuctionCategories (
        auction_id INTEGER,
        category_id INTEGER,
        FOREIGN KEY (auction_id) REFERENCES Auctions (auction_id),
        FOREIGN KEY (category_id) REFERENCES Categories (category_id)
    )
''')

# Create AuctionTags table to associate auctions with tags
cursor.execute('''
    CREATE TABLE IF NOT EXISTS AuctionTags (
        auction_id INTEGER,
        tag_id INTEGER,
        FOREIGN KEY (auction_id) REFERENCES Auctions (auction_id),
        FOREIGN KEY (tag_id) REFERENCES Tags (tag_id)
    )
''')

# Create Sessions table for user authentication
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Sessions (
        session_id TEXT PRIMARY KEY,
        user_id INTEGER,
        expiration DATETIME NOT NULL,
        FOREIGN KEY (user_id) REFERENCES Users (user_id)
    )
''')

# Create Admin role and assign it to the admin user
cursor.execute("INSERT OR IGNORE INTO Roles (role_name) VALUES ('Admin')")
cursor.execute("SELECT user_id FROM Users WHERE username = 'admin'")
admin_user_id = cursor.fetchone()
if admin_user_id:
    cursor.execute("INSERT OR IGNORE INTO UserRoles (user_id, role_id) VALUES (?, (SELECT role_id FROM Roles WHERE role_name = 'Admin'))", (admin_user_id[0],))

# Commit changes and close the database connection
conn.commit()
conn.close()

def hash_password(password, salt):
    """Hashes a password using SHA-256 with salt."""
    password = password.encode('utf-8')
    salt = salt.encode('utf-8')
    return hashlib.sha256(salt + password).hexdigest()

def generate_salt():
    """Generates a random salt for password hashing."""
    return uuid.uuid4().hex

def register_user():
    """Registers a new user in the database."""
    username = username_entry.get()
    email = email_entry.get()
    password = password_entry.get()
    first_name = first_name_entry.get()
    last_name = last_name_entry.get()
    address = address_entry.get()
    phone_number = phone_number_entry.get()

    # Generate a random salt and hash the password
    salt = generate_salt()
    hashed_password = hash_password(password, salt)

    # Insert user data into the Users table
    conn = sqlite3.connect("auction_website.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO Users (username, email, password, first_name, last_name, address, phone_number) VALUES (?, ?, ?, ?, ?, ?, ?)",
                   (username, email, hashed_password, first_name, last_name, address, phone_number))
    conn.commit()
    conn.close()

    # Clear the registration form
    username_entry.delete(0, tk.END)
    email_entry.delete(0, tk.END)
    password_entry.delete(0, tk.END)
    first_name_entry.delete(0, tk.END)
    last_name_entry.delete(0, tk.END)
    address_entry.delete(0, tk.END)
    phone_number_entry.delete(0, tk.END)

def login_user():
    """Logs in a user and creates a session."""
    username = login_username_entry.get()
    password = login_password_entry.get()

    # Check if the username and password match a user in the Users table
    conn = sqlite3.connect("auction_website.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, password FROM Users WHERE username = ?", (username,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        user_id, hashed_password = user_data
        salt = hashed_password[:64]  # Extract the salt from the hashed password
        if hashed_password == hash_password(password, salt):
            # Passwords match; create a session and store it in the Sessions table
            session_id = str(uuid.uuid4())
            expiration = datetime.datetime.now() + datetime.timedelta(hours=1)  # Session expires in 1 hour
            conn = sqlite3.connect("auction_website.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO Sessions (session_id, user_id, expiration) VALUES (?, ?, ?)",
                           (session_id, user_id, expiration))
            conn.commit()
            conn.close()

            # Clear the login form
            login_username_entry.delete(0, tk.END)
            login_password_entry.delete(0, tk.END)

            # Redirect to the main application interface (you can implement this)
            show_auction_interface()

def create_auction():
    """Creates a new auction listing in the database."""
    title = auction_title_entry.get()
    description = auction_description_entry.get()
    start_time = auction_start_time_entry.get()
    end_time = auction_end_time_entry.get()
    reserve_price = auction_reserve_price_entry.get()

    # Insert auction data into the Auctions table
    conn = sqlite3.connect("auction_website.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO Auctions (seller_id, title, description, start_time, end_time, reserve_price) VALUES (?, ?, ?, ?, ?, ?)",
                   (1, title, description, start_time, end_time, reserve_price))  # Replace '1' with the actual seller's user_id
    conn.commit()
    conn.close()

    # Clear the auction creation form
    auction_title_entry.delete(0, tk.END)
    auction_description_entry.delete(0, tk.END)
    auction_start_time_entry.delete(0, tk.END)
    auction_end_time_entry.delete(0, tk.END)
    auction_reserve_price_entry.delete(0, tk.END)

def show_auction_interface():
    """Displays the main auction interface after login."""
    # Implement your main auction interface here (TKinter window, widgets, etc.)

# Create the main TKinter window
root = tk.Tk()
root.title("Auction Website")

# Create and configure registration form
registration_frame = tk.Frame(root)
registration_frame.pack()
tk.Label(registration_frame, text="Registration").pack()
username_entry = tk.Entry(registration_frame, text="Username")
email_entry = tk.Entry(registration_frame, text="Email")
password_entry = tk.Entry(registration_frame, text="Password")
first_name_entry = tk.Entry(registration_frame, text="First Name")
last_name_entry = tk.Entry(registration_frame, text="Last Name")
address_entry = tk.Entry(registration_frame, text="Address")
phone_number_entry = tk.Entry(registration_frame, text="Phone Number")
register_button = tk.Button(registration_frame, text="Register", command=register_user)
username_entry.pack()
email_entry.pack()
password_entry.pack()
first_name_entry.pack()
last_name_entry.pack()
address_entry.pack()
phone_number_entry.pack()
register_button.pack()

# Create and configure login form
login_frame = tk.Frame(root)
login_frame.pack()
tk.Label(login_frame, text="Login").pack()
login_username_entry = tk.Entry(login_frame, text="Username")
login_password_entry = tk.Entry(login_frame, text="Password")
login_button = tk.Button(login_frame, text="Login", command=login_user)
login_username_entry.pack()
login_password_entry.pack()
login_button.pack()

# Create and configure auction creation form
auction_creation_frame = tk.Frame(root)
auction_creation_frame.pack()
tk.Label(auction_creation_frame, text="Create Auction").pack()
auction_title_entry = tk.Entry(auction_creation_frame, text="Title")
auction_description_entry = tk.Entry(auction_creation_frame, text="Description")
auction_start_time_entry = tk.Entry(auction_creation_frame, text="Start Time")
auction_end_time_entry = tk.Entry(auction_creation_frame, text="End Time")
auction_reserve_price_entry = tk.Entry(auction_creation_frame, text="Reserve Price")
create_auction_button = tk.Button(auction_creation_frame, text="Create Auction", command=create_auction)
auction_title_entry.pack()
auction_description_entry.pack()
auction_start_time_entry.pack()
auction_end_time_entry.pack()
auction_reserve_price_entry.pack()
create_auction_button.pack()

# Function to create and connect to the SQLite database
def initialize_database():
    conn = sqlite3.connect("auction_website.db")
    cursor = conn.cursor()
    return conn, cursor

# Function to create tables
def create_tables(cursor):
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Users (
            user_id INTEGER PRIMARY KEY,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            first_name TEXT,
            last_name TEXT,
            address TEXT,
            phone_number TEXT
        )
    ''')
    # Create other tables...

# Function to hash a password with a random salt
def hash_password(password, salt):
    password = password.encode('utf-8')
    salt = salt.encode('utf-8')
    return hashlib.sha256(salt + password).hexdigest()

# Function to generate a random salt
def generate_salt():
    return uuid.uuid4().hex

# Function to register a new user
def register_user():
    # Get user input and validate
    # Hash password and store in the database
    # Clear the registration form

# Function to log in a user
def login_user():
    # Get user input and validate
    # Check if username and password match
    # Create a session and store it in the Sessions table
    # Clear the login form
    # Redirect to the main application interface

# Function to create an auction
def create_auction():
    # Get auction data and validate
    # Insert auction data into the Auctions table
    # Clear the auction creation form

# Function to display the main auction interface
def show_auction_interface():
    # Implement your main auction interface here

if __name__ == "__main__":
    conn, cursor = initialize_database()
    create_tables(cursor)
    conn.commit()
    conn.close()

    root = tk.Tk()
    root.title("Auction Website")

    # Create and configure registration, login, and auction creation forms...

root.mainloop()